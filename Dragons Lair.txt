Only for Unix and Linux based architecture due to commands executed by scriptm

Organize Your Project StructureEnsure your project structure looks like this:project-directory/
│
├── public/
│   ├── index.html
│   └── app.js
│
├── node_modules/
├── package.json
└── server.js
Step : Install Dependencies and Run the ServerEnsure you have Node.js and npm installed. Then, install Express:npm init -y
npm install expressFinally, start your server:node server.jsNavigate to http://localhost:3000 in your web browser to interact with your GUI.This setup provides a basic web interface for the security monitoring and user management functions. You can expand the GUI and backend functionalities as needed.

STEP BY STEP GUIDE GUI

Step 1: Install Node.js and npmDownload and install Node.js from nodejs.org. This will also install npm (Node Package Manager).Verify the installation:node -v
npm -v
Step 2: Set Up the ProjectInitialize the project:mkdir project-directory
cd project-directory
npm init -yInstall Express:npm install expressCreate project files and structure:mkdir public
touch public/index.html
touch public/app.js
touch server.js
Step 3: Add HTML and JavaScript Codepublic/index.html:<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Security Monitoring Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .container { width: 50%; margin: 0 auto; }
        header, footer { text-align: center; margin: 20px 0; }
        .section { margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>The Dragon's Lair</h1>
            <h2>The reason you should stay behind the fence</h2>
        </header>

        <div class="section">
            <h3>Add User</h3>
            <form id="addUserForm">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" required>
                <label for="role">Role:</label>
                <input type="text" id="role" name="role" required>
                <button type="submit">Add User</button>
            </form>
        </div>

        <div class="section">
            <h3>Add Super Root Account</h3>
            <form id="addSuperRootForm">
                <label for="superUsername">Username:</label>
                <input type="text" id="superUsername" name="superUsername" required>
                <label for="superPassword">Password:</label>
                <input type="password" id="superPassword" name="superPassword" required>
                <button type="submit">Add Super Root</button>
            </form>
        </div>

        <footer>
            <p>Created by Blu Corbel</p>
        </footer>
    </div>

    <script src="app.js"></script>
</body>
</html>public/app.js:// Encode/Decode functionality
const Base64 = {
    encode: (str) => btoa(str),
    decode: (str) => atob(str),
};

// Function to add user (mocked for demonstration)
const addUser = (username, role) => {
    console.log(`User '${username}' added with role '${role}'`);
};

// Function to add super root account (mocked for demonstration)
const addSuperRootAccount = (username, password) => {
    console.log(`Super root account '${username}' added with password '${Base64.encode(password)}'`);
};

// Event listener for Add User form
document.getElementById('addUserForm').addEventListener('submit', (event) => {
    event.preventDefault();
    const username = event.target.username.value;
    const role = event.target.role.value;
    addUser(username, role);
    alert(`User '${username}' added with role '${role}'`);
});

// Event listener for Add Super Root form
document.getElementById('addSuperRootForm').addEventListener('submit', (event) => {
    event.preventDefault();
    const username = event.target.superUsername.value;
    const password = event.target.superPassword.value;
    addSuperRootAccount(username, password);
    alert(`Super root account '${username}' added`);
});server.js:const express = require('express');
const path = require('path');
const app = express();

app.use(express.static(path.join(__dirname, 'public')));

// Middleware to log IP address of incoming requests
app.use((req, res, next) => {
    const attackerIP = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
    req.attackerIP = attackerIP;
    next();
});

// Endpoint to trigger breach detection
app.get('/breach', (req, res) => {
    const attackerIP = req.attackerIP;
    console.log(`Breach detected from IP: ${attackerIP}`);
    // Call breach detection functions here
    res.send('Breach detected!');
});

// Start server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

Step 4: Run the ServerNavigate to your project directory and start the server:node server.jsAccessing the GUIOpen your web browser and navigate to http://localhost:3000 to interact with the security monitoring dashboard.


